package week6

object vector {
	//SEQ includes vector, list, range
	//Vector complexity:
	//Adding an element - LOG_32(N)

	val nums = Vector(1,55,3,4)               //> nums  : scala.collection.immutable.Vector[Int] = Vector(1, 55, 3, 4)
	nums :+ 100                               //> res0: scala.collection.immutable.Vector[Int] = Vector(1, 55, 3, 4, 100)


	val xs = Array(1,2,3,44)                  //> xs  : Array[Int] = Array(1, 2, 3, 44)
	
	xs map (x => x*2)                         //> res1: Array[Int] = Array(2, 4, 6, 88)
	
	
	val s = "Hello World"                     //> s  : String = Hello World
	s filter(c => c.isLower)                  //> res2: String = elloorld

	val r: Range = 1 until 5                  //> r  : Range = Range(1, 2, 3, 4)
	val t: Range = 1 to 5                     //> t  : Range = Range(1, 2, 3, 4, 5)
	
	1 to 10 by 3                              //> res3: scala.collection.immutable.Range = Range(1, 4, 7, 10)
	6 to 0 by -2                              //> res4: scala.collection.immutable.Range = Range(6, 4, 2, 0)

	s exists (c => c.isUpper)                 //> res5: Boolean = true
	s forall (c => c.isUpper)                 //> res6: Boolean = false
	
	val pairs = List(1,2,3) zip s             //> pairs  : List[(Int, Char)] = List((1,H), (2,e), (3,l))
	pairs unzip                               //> res7: (List[Int], List[Char]) = (List(1, 2, 3),List(H, e, l))
	
	
	//Applies collection-valued function f to all elements of xs and concatenates the results:
	s flatMap (c => List('.',c))              //> res8: String = .H.e.l.l.o. .W.o.r.l.d
	s map (c => c)                            //> res9: String = Hello World
	
}