package week5
import math.Ordering

object merge {
	def msort[T](xs: List[T])(ord: Oredering[T]): List[T] = {
		val n = xs.length / 2
		if ( n == 0 ) xs
		else{
			def merge(xs: List[T], ys: List[T]): List[T] = (xs,ys) match {
				case(Nil, ys) => ys
 				case(xs, Nil) => xs
 				case (x :: xs1, y :: ys1) =>
 					if (lt(x,y)) y :: merge(xs,ys1)
 					else x :: merge(xs1,ys)
			 }
			val (fst,snd) = xs splitAt n
			merge(msort(fst)(lt), msort(snd)(lt))
		
		}
	}


val nums = List(2,-4,5,7,1,8)
val fruits = List("apple", "pinapple", "orange", "banana")



msort(nums)((x: Int, y: Int) => x < y)
//No need to write argument types:
msort(fruits)((x, y) => y.compareTo(x) < 0)
}