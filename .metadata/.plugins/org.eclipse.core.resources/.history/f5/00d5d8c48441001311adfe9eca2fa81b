package week5

object merge {
	def msort[T](xs: List[Int])(lt: (T,T) => Boolean): List[Int] = {
		val n = xs.length / 2
		if ( n == 0 ) xs
		else{
			def merge(xs: List[Int], ys: List[Int]): List[Int] = (xs,ys) match {
				case(Nil, ys) => ys
 				case(xs, Nil) => xs
 				case (x :: xs1, y :: ys1) =>
 					if (x > y) y :: merge(xs,ys1)
 					else x :: merge(xs1,ys)
			 }
			val (fst,snd) = xs splitAt n
			merge(msort(fst)(lt), msort(snd)(lt))
		
		}
	}


val nums = List(2,-4,5,7,1,8)
val fruits = List("apple", "pinapple", "orange", "banana")



msort(nums)((x: Int, y: Int) => x < y)
msort(fruits)(x: Stringm, y: String) => x.compareTo(y) < 0)
}