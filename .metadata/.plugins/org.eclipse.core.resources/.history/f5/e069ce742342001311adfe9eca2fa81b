package week5

object listfun {
  val nums = List(2,-4,5,7,1,8)
	val fruits = List("apple", "pinapple", "orange", "banana")



	nums.filterNot(x => x > 0)

	//super cool, return a list for which the condition holds and a list for which it doesn't.
	nums.partition(x => x > 0)

	//longset prefix for which the predicate is true:
	nums.takeWhile(x => x > 0)

	//the remainder without the elements taken by takeWhile
	nums.dropWhile(x => x > 0)
	
	//combination of takeWhile and dropWhile
	nums.span(x => x > 0)





	def pack[T](xs: List[T]): List[List[T]] = xs match
	{
		case Nil => Nil
		case x :: xs1 =>
			val (first, rest) = xs span(y => y == x)
			first :: pack(rest)
	}
	
	pack(List("a","a","a","b","c","c","a"))
	
	
	def encode[T](xs: List[T]): List[(T, Int)] =
		pack(xs) map (l => (l.head, l.length))
  
  
  encode(List("a","a","a","b","c","c","a"))
  
  
  def concat[T](xs: List[T], ys: List[T]): List[T] =
  	(xs foldRight ys)(_ :: _)
  
  concat(List(1,2,3,4), List(5,6,7,8))
  
  def mapFun[T, U](xs: List[T], f: T => U): List[U] =
    (xs foldRight List[U]())( f(_) )
    
    
 	List(1,2,3,4).map
               
}