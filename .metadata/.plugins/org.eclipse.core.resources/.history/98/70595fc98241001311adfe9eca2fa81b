package week5

object merge {
	def msort(xs: List[Int]): List[Int] = {
		val n = xs.length / 2
		if ( n==0 ) xs
		else{
			def merge(xs: List[Int], ys: List[Int]): List[Int] = (xs,ys) match {
				case(Nil, ys) => ys
 				case(xs, Nil) => xs
 				case (x :: xsl, y :: ysl) =>
 					if (x > y) x :: merge(xsl,ys)
 					else y :: merge(xs,ysl)
			 }
			val (fst,snd) = xs splitAt n
			merge(msort(fst), msort(snd))
		
		}
	}                                         //> msort: (xs: List[Int])List[Int]


val nums = List(2,-4,5,7,1,8)                     //> nums  : List[Int] = List(2, -4, 5, 7, 1, 8)
msort(nums)                                       //> res0: List[Int] = List(8, 7, 5, 2, 1, -4)

}